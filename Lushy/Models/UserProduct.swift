import Foundation
import CoreData

// This is an extension to the UserProduct class that's generated by Core Data
extension UserProduct {
    // Computed property to calculate days until expiry
    var daysUntilExpiry: Int? {
        guard let expireDate = self.expireDate else { return nil }
        let calendar = Calendar.current
        let today = calendar.startOfDay(for: Date())
        let expiry = calendar.startOfDay(for: expireDate)
        
        let components = calendar.dateComponents([.day], from: today, to: expiry)
        return components.day
    }
    
    // Computed property to check if product is expiring soon (within 14 days)
    var isExpiringSoon: Bool {
        guard let days = daysUntilExpiry else { return false }
        return days >= 0 && days <= 14
    }
    
    // Computed property to check if product has expired
    var isExpired: Bool {
        guard let days = daysUntilExpiry else { return false }
        return days < 0
    }
    
    // Method to create a formatted string of expiry date or days until expiry
    func expiryText() -> String {
        guard let expireDate = self.expireDate else { return "No expiry date" }
        
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        
        if let days = daysUntilExpiry {
            if days < 0 {
                return "Expired on \(formatter.string(from: expireDate))"
            } else if days == 0 {
                return "Expires today!"
            } else if days == 1 {
                return "Expires tomorrow"
            } else if days <= 14 {
                return "Expires in \(days) days"
            } else {
                return "Expires on \(formatter.string(from: expireDate))"
            }
        }
        
        return "Expires on \(formatter.string(from: expireDate))"
    }
    
    // Convenience method to add a comment
    func addComment(_ text: String) {
        let newComment = Comment(text: text)
        var currentComments = self.comments ?? []
        currentComments.append(newComment)
        self.comments = currentComments
    }
    
    // Convenience method to add a review
    func addReview(rating: Int, title: String, text: String) {
        let newReview = Review(rating: rating, title: title, text: text)
        var currentReviews = self.reviews ?? []
        currentReviews.append(newReview)
        self.reviews = currentReviews
    }
}